parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { root: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(t, l) { return {root: t, links: l}; },
          function(n, s) { return s ? extend(s, {subnodes: [n].concat(s.subnodes)}) : n; },
          function(o, t) { return extend(o, {subnodes: o.type == t.type && o.iso == t.iso && t.id == o.id && t.spacing == o.spacing? t.subnodes : [t]}); },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function() { return {type: 'hsplit'}; },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function() { return {type: 'vsplit'}; },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          function(l, n, r) { return extend(n, {alignlt: !!l, alignrb: !!r}); },
          function(i, n) { return i ? extend(n, i) : n; },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(l, i) { return {id: i, clickable: !!l}; },
          /^[A-Za-z0-9]/,
          { type: "class", value: "[A-Za-z0-9]", description: "[A-Za-z0-9]" },
          function(chars) { return chars.join(''); },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(t) { return t; },
          function(n) { return extend(n, {type: 'shape'}); },
          function(n) { return n ? extend(n, {type: 'text'}) : {type: 'padding'}; },
          "[(",
          { type: "literal", value: "[(", description: "\"[(\"" },
          ")]",
          { type: "literal", value: ")]", description: "\")]\"" },
          function(t) { return {shape: 'rrect', subnode: t}; },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(t) { return {shape: 'rect', subnode: t}; },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(t) { return {shape: 'circle', subnode: t}; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"]/,
          { type: "class", value: "[^\"]", description: "[^\"]" },
          function(chars) { return {text: chars.join('')}; },
          /^[^\-[\]{}:|()<>]/,
          { type: "class", value: "[^-[\\]{}:|()<>]", description: "[^-[\\]{}:|()<>]" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(l) { return l.map(function(lk) { return lk[1]; }); },
          function(f, l, t) { return extend(l, {from: f, to: t}); },
          function(fm, s, tm) { return extend(s, {from_marker: fm || 'none', to_marker: tm || 'none'}); },
          function(s, c) { return c ? extend(s, {text: c[0]}) : s; },
          /^[\-.]/,
          { type: "class", value: "[\\-\\.]", description: "[\\-\\.]" },
          function(s) { return {stroke: s[0] == '.' ? 'dashed' : 'plain'}; },
          /^[^\-.>,]/,
          { type: "class", value: "[^-.>,]", description: "[^-.>,]" },
          /^[<]/,
          { type: "class", value: "[<]", description: "[<]" },
          function(m) { return 'arrow'; },
          /^[>]/,
          { type: "class", value: "[>]", description: "[>]" }
        ],

        peg$bytecode = [
          peg$decode("%;!/2#;./)$8\": \"\"! )(\"'#&'#"),
          peg$decode("%;$/7#;\".\" &\"/)$8\":!\"\"! )(\"'#&'#"),
          peg$decode("%;#/2#;!/)$8\":\"\"\"! )(\"'#&'#"),
          peg$decode("%2#\"\"6#7$/& 8!:%! ).4 &%2&\"\"6&7'/& 8!:(! )"),
          peg$decode("%2)\"\"6)7*.\" &\"/G#;%/>$2+\"\"6+7,.\" &\"/*$8#:-##\"! )(#'#(\"'#&'#"),
          peg$decode("%;&.\" &\"/2#;(/)$8\":.\"\"! )(\"'#&'#"),
          peg$decode("%2/\"\"6/70.\" &\"/A#;'/8$21\"\"6172/)$8#:3#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%$44\"\"5!75/,#0)*44\"\"5!75&&&#/' 8!:6!! )"),
          peg$decode("%27\"\"6778/@#;!/7$29\"\"697:/($8#:;#!!)(#'#(\"'#&'#.F &%;)/' 8!:<!! ).4 &%;*.\" &\"/' 8!:=!! )"),
          peg$decode("%2>\"\"6>7?/@#;!/7$2@\"\"6@7A/($8#:B#!!)(#'#(\"'#&'#.\x83 &%2C\"\"6C7D/@#;!/7$2E\"\"6E7F/($8#:G#!!)(#'#(\"'#&'#.P &%2H\"\"6H7I/@#;!/7$2J\"\"6J7K/($8#:L#!!)(#'#(\"'#&'#"),
          peg$decode(";+.# &;-"),
          peg$decode("%2M\"\"6M7N/@#;,/7$2M\"\"6M7N/($8#:;#!!)(#'#(\"'#&'#"),
          peg$decode("%$4O\"\"5!7P/,#0)*4O\"\"5!7P&&&#/' 8!:Q!! )"),
          peg$decode("%$4R\"\"5!7S/,#0)*4R\"\"5!7S&&&#/' 8!:Q!! )"),
          peg$decode("%$%2T\"\"6T7U/,#;//#$+\")(\"'#&'#0<*%2T\"\"6T7U/,#;//#$+\")(\"'#&'#&/' 8!:V!! )"),
          peg$decode("%;'/<#;0/3$;'/*$8#:W##\"! )(#'#(\"'#&'#"),
          peg$decode("%;4.\" &\"/A#;1/8$;5.\" &\"/*$8#:X##\"! )(#'#(\"'#&'#"),
          peg$decode("%;2/J#%;3/,#;2/#$+\")(\"'#&'#.\" &\"/)$8\":Y\"\"! )(\"'#&'#"),
          peg$decode("%$4Z\"\"5!7[/,#0)*4Z\"\"5!7[&&&#/' 8!:\\!! )"),
          peg$decode("%2M\"\"6M7N/S#$4O\"\"5!7P0)*4O\"\"5!7P&/7$2M\"\"6M7N/($8#:6#!!)(#'#(\"'#&'#.H &%$4]\"\"5!7^/,#0)*4]\"\"5!7^&&&#/' 8!:6!! )"),
          peg$decode("%4_\"\"5!7`/' 8!:a!! )"),
          peg$decode("%4b\"\"5!7c/' 8!:a!! )")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


        var extend = function(obj, add) {
           for (var i in add) {
              if (add.hasOwnProperty(i)) {
                 obj[i] = add[i];
              }
           }
           return obj;
        };
        var index = 1;


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
